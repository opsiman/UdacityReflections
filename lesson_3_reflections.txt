3.1 When would you want to use a remote repository rather than keeping
all your work local?

If I were working on the file from more than one computer.  If I want
a remote backup of my project.  If more than one person is working on
the project.  This is going to come in very handy since I seem to find
myself working  on 3 different computers throughout any given day.



3.2 Why might you want to always pull changes manually rather than
having Git automatically stay up-to-date with your remote repository?

First thought is that you don't necessarily get to a good stopping
point with every commit--  and neither does another coder working on
the project.  You probably don't need to chase every commit as it
comes. I'm not sure how you'd know when to pull though,  when other
coders are working on the same project.



3.3 Describe the differences between forks, clones, and branches. When
would you use one instead of another?

A clone is a copy of a repository on a local machine. A fork is a
special kind of clone that is copied from one remote GitHub repository
to another remote GitHub repository. It has the benefit of linking
back to, and crediting, the author who originated the repository.
Branches are alternate versions, whether temporary or permanent, of a
project. They can be local or remote, and involve copying the code for
the purpose of altering it-- possibly with the intention of merging it
back into another branch later.



3.4 What is the benefit of having a copy of the last known state of
the remote stored locally?

It's great if you're working offline. Even if you have internet access, 
it's nice to be able to quickly compare, merge, etc. with a local copy 
of the latest. Also you can get all your stuff synched locally before 
you add it back in to a public repository.



3.5 How would you collaborate without using Git or GitHub? 
What would be easier, and what would be harder?

You might want to break up projects into owned files that one person
keeps track of. You'd have to use the built in 'diff' command and track
every damn thing by hand. It would be harder.
On really small projects, the overhead of using GitHub might occasionally
be more of a pain than it's worth, but most of the time it seems 
like it would be a very useful tool for collaborating.

